@using CADPLIS.Application.Contracts;
@using CADPLIS.Application.Contracts.Accounts;
@using CADPLIS.Common;
@using CADPLIS.WebSite.Notice;
@using CADPLIS.WebSite.Shared;
@inject NavigationManager navigationManager
<h3>User</h3>

<EditForm id="updateUserForm" Model="@currentUser" OnValidSubmit="@UpdateUserAsync">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset>
        <div class="form-group">
            <MatTextField @bind-Value="@currentUser.UserName" Label=UserName Icon="person" IconTrailing="true" FullWidth="true" Required="true"></MatTextField>
        </div>
        <div class="form-group">
            <MatTextField @bind-Value="@currentUser.Email" Label=Email Icon="mail_outline" IconTrailing="true" FullWidth="true" Required="true" Type="mail"></MatTextField>
        </div>
        <div>
            <MatCheckbox @bind-Value="@currentUser.IsHead" Label="IsHead" Class="headcheck"></MatCheckbox>
        </div>
        <MatChipSet>
            @foreach (var role in roleSelections.OrderBy(x => x.DisplayValue))
            {
                <MatChip Label="@role.DisplayValue" LeadingIcon="@((role.Selected) ? "done" : "")" @onclick="@(()=>UpdateUserRole(role))" />}
        </MatChipSet>
        <div class="form-group">
            Group
            <MatTreeView TNode="GroupInfoDto"
                         RootNode="@groupTree"
                         @bind-SelectedNode="@SelectedParentNode"
                         GetChildNodesCallback="@((n)=>n.Chilrens)" Class="gtree">
                <NodeTemplate Context="con">
                    @con.GroupName
                </NodeTemplate>
            </MatTreeView>
        </div>

    </fieldset>
    <div class="mat-layout-grid mat-layout-grid-align-right" style="max-width: 800px;">
        <div class="mat-layout-grid-inner">
            <div class="mat-layout-grid-cell">
                <MatButton Outlined="true" OnClick="@CancelChanges">Cancel</MatButton>
                <MatButton Raised="true" Type="submit" form="updateUserForm">Update</MatButton>
            </div>
        </div>
    </div>
  
</EditForm>


@code {
    ApplicationUserDto currentUser { get; set; } = new();
    [Inject] IViewNotifier viewNotifier { get; set; }
    protected List<SelectItem<Guid>> roleSelections { get; set; } = new();
    [Inject] HttpClient httpClient { get; set; }
    [Inject] IMatToaster Toaster { get; set; }

    [Parameter] public string Id { get; set; }
    private GroupInfoDto groupTree { get; set; } = new GroupInfoDto();
    private GroupInfoDto SelectedParentNode { get; set; }
    [CascadingParameter] public Error Error { get; set; }


    string getUserUrl = "api/Account/GetUserById/{0}";
    string getAllRolesUrl = "api/Account/GetAllRoles";
    string updateUserUrl = "api/Account/UpdateUser";
    protected override async Task OnInitializedAsync()
    {
        await GetUserById(Guid.Parse( Id));
        await GetTreeGroupList();
        await LoadRoles();
        GetGroupWithChildren((List<GroupInfoDto>)groupTree.Chilrens, currentUser.GroupId.ToString());
        await base.OnInitializedAsync();
    }

    async Task GetUserById(Guid id)
    {
        var res = await httpClient.GetJsonAsync<ApiResponse<ApplicationUserDto>>(string.Format(getUserUrl, id));
        if (res.IsSuccessStatusCode)
        {
            currentUser = res.Result;
        }
        else
        {
            Error.ShowError(res.Message);
        }
    }

    protected void UpdateUserRole(SelectItem<Guid> roleSelectionItem)
    {
        //if (currentUser.UserName.ToLower() != DefaultUserNames.Administrator || roleSelectionItem.DisplayValue != DefaultRoleNames.Administrator)
        roleSelectionItem.Selected = !roleSelectionItem.Selected;
    }

    protected async Task LoadRoles()
    {
        try
        {
            var res = await httpClient.GetJsonAsync<ApiResponse<List<RoleInfoDto>>>(getAllRolesUrl);
            if (res.IsSuccessStatusCode)
            {
                var result = res.Result;
                roleSelections = result.Select(i => new SelectItem<Guid>
                {
                    Id = i.Id,
                    DisplayValue = i.Name,
                    Selected = currentUser.Roles != null && currentUser.Roles.Contains(i.Name)
                }).ToList();
            }
            else
            {
                Error.ShowError(res.Message);
            }
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, "Operation Failed");
        }
    }


    async Task CancelChanges()
    {
        navigationManager.NavigateTo("User/UserInfo");
    }

    async Task UpdateUserAsync()
    {
        var userModel = new UserViewModel
        {
            UserId = currentUser.Id,
            UserName = currentUser.UserName,
            Email = currentUser.Email,
            Roles = roleSelections.Where(i => i.Selected).Select(i => i.DisplayValue).ToList(),
            IsHead = currentUser.IsHead,
            GroupId = SelectedParentNode?.Id
        };
        if (string.IsNullOrEmpty(userModel.GroupId?.ToString()))
        {
            Toaster.Add("user group is required!", MatToastType.Warning, "warning");
            return;
        }
        var result = await httpClient.PutJsonAsync<ApiResponse>(updateUserUrl, userModel);
        if (!result.IsSuccessStatusCode)
        {
            Error.ShowError(result.Message);
        }
        viewNotifier.Show("update success", ViewNotifierType.Success, "success");
        navigationManager.NavigateTo("User/UserInfo");
    }
    async Task GetTreeGroupList()
    {
        var result = await httpClient.GetFromJsonAsync<ApiResponse<List<GroupInfoDto>>>("/api/Account/GetGroupWhithChilds");
        if (result.IsSuccessStatusCode)
        {
            groupTree.GroupName = " Top Group";
            groupTree.Chilrens = result.Result;

        }
        else
        {
            Error.ShowError(result.Message);
        }
    }
    void GetGroupWithChildren(List<GroupInfoDto> parentMenus, string parentId)
    {
        foreach (var item in parentMenus)
        {
            if (item.Id.ToString() == parentId)
            {
                SelectedParentNode = item;
                return;
            }
            else if (item.Chilrens != null)
            {
                GetGroupWithChildren((List<GroupInfoDto>)item.Chilrens, parentId);
            }
        }

    }
}
