// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace CADPLIS.WebSite.Components.Layout
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Project\CAD\SourceCode\CADPLIS2021\CAD-PLIS\CADPLIS.WebSite\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Project\CAD\SourceCode\CADPLIS2021\CAD-PLIS\CADPLIS.WebSite\_Imports.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Project\CAD\SourceCode\CADPLIS2021\CAD-PLIS\CADPLIS.WebSite\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Project\CAD\SourceCode\CADPLIS2021\CAD-PLIS\CADPLIS.WebSite\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Project\CAD\SourceCode\CADPLIS2021\CAD-PLIS\CADPLIS.WebSite\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Project\CAD\SourceCode\CADPLIS2021\CAD-PLIS\CADPLIS.WebSite\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Project\CAD\SourceCode\CADPLIS2021\CAD-PLIS\CADPLIS.WebSite\_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Project\CAD\SourceCode\CADPLIS2021\CAD-PLIS\CADPLIS.WebSite\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Project\CAD\SourceCode\CADPLIS2021\CAD-PLIS\CADPLIS.WebSite\_Imports.razor"
using CADPLIS.WebSite;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Project\CAD\SourceCode\CADPLIS2021\CAD-PLIS\CADPLIS.WebSite\_Imports.razor"
using CADPLIS.WebSite.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Project\CAD\SourceCode\CADPLIS2021\CAD-PLIS\CADPLIS.WebSite\_Imports.razor"
using CADPLIS.WebSite.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Project\CAD\SourceCode\CADPLIS2021\CAD-PLIS\CADPLIS.WebSite\_Imports.razor"
using CADPLIS.WebSite.Components.FrontEnd;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Project\CAD\SourceCode\CADPLIS2021\CAD-PLIS\CADPLIS.WebSite\_Imports.razor"
using CADPLIS.WebSite.Components.LandingPage;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "C:\Project\CAD\SourceCode\CADPLIS2021\CAD-PLIS\CADPLIS.WebSite\_Imports.razor"
using CADPLIS.WebSite.Components.Layout;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "C:\Project\CAD\SourceCode\CADPLIS2021\CAD-PLIS\CADPLIS.WebSite\_Imports.razor"
using CADPLIS;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "C:\Project\CAD\SourceCode\CADPLIS2021\CAD-PLIS\CADPLIS.WebSite\_Imports.razor"
using MatBlazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "C:\Project\CAD\SourceCode\CADPLIS2021\CAD-PLIS\CADPLIS.WebSite\_Imports.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "C:\Project\CAD\SourceCode\CADPLIS2021\CAD-PLIS\CADPLIS.WebSite\_Imports.razor"
using Microsoft.Extensions.Logging;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "C:\Project\CAD\SourceCode\CADPLIS2021\CAD-PLIS\CADPLIS.WebSite\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "C:\Project\CAD\SourceCode\CADPLIS2021\CAD-PLIS\CADPLIS.WebSite\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "C:\Project\CAD\SourceCode\CADPLIS2021\CAD-PLIS\CADPLIS.WebSite\_Imports.razor"
using CADPLIS.WebSite.Auth;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "C:\Project\CAD\SourceCode\CADPLIS2021\CAD-PLIS\CADPLIS.WebSite\_Imports.razor"
using CADPLIS.Domain.Identity;

#line default
#line hidden
#nullable disable
#nullable restore
#line 24 "C:\Project\CAD\SourceCode\CADPLIS2021\CAD-PLIS\CADPLIS.WebSite\_Imports.razor"
using CADPLIS.Domain;

#line default
#line hidden
#nullable disable
#nullable restore
#line 25 "C:\Project\CAD\SourceCode\CADPLIS2021\CAD-PLIS\CADPLIS.WebSite\_Imports.razor"
using CADPLIS.Common;

#line default
#line hidden
#nullable disable
#nullable restore
#line 28 "C:\Project\CAD\SourceCode\CADPLIS2021\CAD-PLIS\CADPLIS.WebSite\_Imports.razor"
using BlazorStrap;

#line default
#line hidden
#nullable disable
#nullable restore
#line 30 "C:\Project\CAD\SourceCode\CADPLIS2021\CAD-PLIS\CADPLIS.WebSite\_Imports.razor"
using BlazorStrap.Extensions.TreeView;

#line default
#line hidden
#nullable disable
#nullable restore
#line 33 "C:\Project\CAD\SourceCode\CADPLIS2021\CAD-PLIS\CADPLIS.WebSite\_Imports.razor"
using CADPLIS.Domain.MCApplications;

#line default
#line hidden
#nullable disable
#nullable restore
#line 34 "C:\Project\CAD\SourceCode\CADPLIS2021\CAD-PLIS\CADPLIS.WebSite\_Imports.razor"
using CADPLIS.WebSite.HttpClients;

#line default
#line hidden
#nullable disable
    public partial class FrontEndNavMenu : Microsoft.AspNetCore.Components.ComponentBase, IDisposable
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 176 "C:\Project\CAD\SourceCode\CADPLIS2021\CAD-PLIS\CADPLIS.WebSite\Components\Layout\FrontEndNavMenu.razor"
       
    private int frontEndNavSubMenuSelectedMenu { get; set; } = 0;
    private BSCollapse NavbarCollapse;
    private FormsModel formsModel = new FormsModel();
    bool UserControlledIsOpen { get; set; } = false;
    void onclick(MouseEventArgs e)
    {
        NavbarCollapse.Toggle();
        Console.WriteLine("Navbar State->" + NavbarCollapse.IsOpen.ToString());
    }
    void OpenChanged(bool e)
    {
        Console.WriteLine("OpenChanged->" + e.ToString());
    }

    void UserControlledClick(MouseEventArgs e)
    {
        UserControlledIsOpen = !UserControlledIsOpen;
        StateHasChanged();
    }

    public class FormsModel
    {
        public string Blank { get; set; }
    }

    private bool toggleMenuOnRedirect(bool isRedirect)
    {
        if (isRedirect)
        {
            NavbarCollapse.Toggle();
            Console.WriteLine("Toogle Menu on Redirect!");
            return false;
        }
        return true;
    }

    // NavMenu
    public class MenuItem
    {
        public int id { get; set; }
        public String name { get; set; }
        public String RouteUrl { get; set; }
        public int? parentId { get; set; }
    }

    private List<int> expendParentIds;
    private List<MenuItem> menuItems = new List<MenuItem>();
    private Dictionary<int, List<MenuItem>> subMenuDict;
    private Dictionary<int, bool> openedDict = new Dictionary<int, bool>();

    protected override void OnInitialized()
    {
        // Subscribe to the event
        NavigationManager.LocationChanged += LocationChanged;

        base.OnInitialized();
        if (menuItems == null)
            menuItems = new List<MenuItem>();
        if (subMenuDict == null)
            subMenuDict = new Dictionary<int, List<MenuItem>>();
        if (expendParentIds == null)
            expendParentIds = new List<int>();
        menuItems = getMenuItems();
        for (int i = 0; i < 18; i++)
        {
            openedDict.Add(i, false);
        }
    }

    private void menuItemClicked(int parentId)
    {
        expendParentIds.Add(parentId);
        openedDict[parentId] = true;
    }
    private bool isUserControlledIsOpen(int id)
    {
        return expendParentIds.Contains(id);
    }

    private void updateExpendParentIds(int index, int newParentId, int? itemParentId = null)
    {
        if (menuItems.FindAll(x => x.parentId == newParentId).Count > 0 || (itemParentId == null || itemParentId == 0))
        {
            expendParentIds.Insert(index, newParentId);
            Console.WriteLine("updateExpendParentIds: " + index + " // " + newParentId + " // " + expendParentIds.Count);
            if (expendParentIds.Count >= index + 2)
                expendParentIds.RemoveRange(index + 1, (expendParentIds.Count - 1) - index);
        }
        // Hardcoded for FrontEndNavSubMenu
        if (newParentId == 2)
        {
            frontEndNavSubMenuSelectedMenu = 2;
        }
        else if (newParentId == 3)
        {
            frontEndNavSubMenuSelectedMenu = 1;
        }
        else if (newParentId == 5)
        {
            frontEndNavSubMenuSelectedMenu = 3;
        }
        else
        {
            frontEndNavSubMenuSelectedMenu = 0;
        }
    }

    private Boolean hasChild(int parentId)
    {
        return menuItems.FindAll(x => x.parentId == parentId).Count > 0;
    }

    private List<MenuItem> getChildMenuItemList(int parentId)
    {
        return menuItems.FindAll(x => x.parentId == parentId).ToList();
    }

    private void clearExpendParentIds()
    {
        //expendParentIds = new List<int>();
    }

    // This list should be get from DB
    public List<MenuItem> getMenuItems()
    {
        // 1-99 Root
        // 100-199 -> Leaf of Root 1
        // 200-299 -> Leaf of Root 2
        // NavMenu Root Item
        menuItems.Add(new MenuItem { id = 1, name = "Home", parentId = null, RouteUrl = "/landing" });
        menuItems.Add(new MenuItem { id = 3, name = "Licences", parentId = null, RouteUrl = null });
        menuItems.Add(new MenuItem { id = 2, name = "Registration", parentId = null, RouteUrl = null });
        //menuItems.Add(new MenuItem { id = 4, name = "About Us", parentId = null, RouteUrl = null });
        menuItems.Add(new MenuItem { id = 5, name = "Information", parentId = null, RouteUrl = null });
        // Registration Menu - Individual
        menuItems.Add(new MenuItem { id = 2000, name = "Individual Account", parentId = 2, RouteUrl = null });
        menuItems.Add(new MenuItem { id = 2001, name = "Individual", parentId = 2000, RouteUrl = null });
        // Registration Menu - Corperate
        menuItems.Add(new MenuItem { id = 2100, name = "Corperate Account", parentId = 2, RouteUrl = null });
        menuItems.Add(new MenuItem { id = 2101, name = "Administrator", parentId = 2100, RouteUrl = null });
        menuItems.Add(new MenuItem { id = 2102, name = "Authorised Examiner", parentId = 2100, RouteUrl = null });
        menuItems.Add(new MenuItem { id = 2103, name = "AME", parentId = 2100, RouteUrl = null });
        menuItems.Add(new MenuItem { id = 2104, name = "AMA", parentId = 2100, RouteUrl = null });
        // Licence - Flight Crew (20)
        menuItems.Add(new MenuItem { id = 3000, name = "Flight Crew", parentId = 3, RouteUrl = null });
        menuItems.Add(new MenuItem { id = 3010, name = "Aeroplanes", parentId = 3000, RouteUrl = null });
        menuItems.Add(new MenuItem { id = 3011, name = "Private Pilot's Licence", parentId = 3010, RouteUrl = null });
        menuItems.Add(new MenuItem { id = 3030, name = "PPL Ab-initio Issue / Conversion", parentId = 3011, RouteUrl = "/information" });
        menuItems.Add(new MenuItem { id = 3031, name = "Flight Radiotelephony Operator's (Restricted) Licence (Initial / Renewal)", parentId = 3011, RouteUrl = "/information" });
        menuItems.Add(new MenuItem { id = 3032, name = "AFI/FI Rating - Endorsement", parentId = 3011, RouteUrl = "/information" });

        menuItems.Add(new MenuItem { id = 3012, name = "Prefessional Pilot's Licence", parentId = 3010, RouteUrl = null });
        menuItems.Add(new MenuItem { id = 3033, name = "MPL Ab-initio Issue", parentId = 3012, RouteUrl = "/information" });
        menuItems.Add(new MenuItem { id = 3034, name = "CPL Conversion", parentId = 3012, RouteUrl = "/information" });
        menuItems.Add(new MenuItem { id = 3035, name = "ATPL Conversion", parentId = 3012, RouteUrl = "/information" });
        menuItems.Add(new MenuItem { id = 3036, name = "CPL Ab-initio Issue", parentId = 3012, RouteUrl = "/information" });
        menuItems.Add(new MenuItem { id = 3037, name = "ATPL Upgrade", parentId = 3012, RouteUrl = "/information" });
        menuItems.Add(new MenuItem { id = 3038, name = "ATPL/CPL/MPL Renewal", parentId = 3012, RouteUrl = "/information" });
        menuItems.Add(new MenuItem { id = 3039, name = "ATPL/CPL/MPL Flight Test (Initial / Renewal)", parentId = 3012, RouteUrl = "/information" });

        menuItems.Add(new MenuItem { id = 3013, name = "Rating / Endorsement / Certificate", parentId = 3010, RouteUrl = null });
        menuItems.Add(new MenuItem { id = 3040, name = "Language Proficiency Endorsement", parentId = 3013, RouteUrl = "/information" });
        menuItems.Add(new MenuItem { id = 3041, name = "Validation of Licence", parentId = 3013, RouteUrl = "/information" });
        menuItems.Add(new MenuItem { id = 3042, name = "Aircraft Rating Endorsement", parentId = 3013, RouteUrl = "/information" });
        menuItems.Add(new MenuItem { id = 3043, name = "Instrument Rating Endorsement", parentId = 3013, RouteUrl = "/information" });
        menuItems.Add(new MenuItem { id = 3044, name = "Change of Personal Particulars / Licence Remarks / Licence Reprint", parentId = 3013, RouteUrl = "/information" });
        menuItems.Add(new MenuItem { id = 3045, name = "Licence Verification", parentId = 3013, RouteUrl = "/information" });
        menuItems.Add(new MenuItem { id = 3046, name = "Conversion Terms (ATPL/CPL/AFI Rating)", parentId = 3013, RouteUrl = "/information" });
        menuItems.Add(new MenuItem { id = 3047, name = "Certificate of Experience (Initial / Renewal)", parentId = 3013, RouteUrl = "/information" });
        menuItems.Add(new MenuItem { id = 3048, name = "Other Licence Application", parentId = 3013, RouteUrl = "/information" });
        menuItems.Add(new MenuItem { id = 3049, name = "Theoretical Knowledge Examination - Result Submission", parentId = 3013, RouteUrl = "/information" });
        menuItems.Add(new MenuItem { id = 3050, name = "Theoretical Knowledge Examination - Booking", parentId = 3013, RouteUrl = "/information" });


        menuItems.Add(new MenuItem { id = 3020, name = "Helicopters", parentId = 3000, RouteUrl = null });
        menuItems.Add(new MenuItem { id = 3021, name = "Private Pilot's Licence", parentId = 3020, RouteUrl = null });
        menuItems.Add(new MenuItem { id = 3051, name = "PPL Ab-initio Issue / Conversion", parentId = 3021, RouteUrl = "/information" });
        menuItems.Add(new MenuItem { id = 3052, name = "Flight Radiotelephony Operator's (Restricted) Licence (Initial / Renewal)", parentId = 3021, RouteUrl = "/information" });
        menuItems.Add(new MenuItem { id = 3053, name = "AFI/FI Rating - Endorsement", parentId = 3021, RouteUrl = "/information" });

        menuItems.Add(new MenuItem { id = 3022, name = "Prefessional Pilot's Licence", parentId = 3020, RouteUrl = null });
        menuItems.Add(new MenuItem { id = 3054, name = "MPL Ab-initio Issue", parentId = 3012, RouteUrl = "/information" });
        menuItems.Add(new MenuItem { id = 3055, name = "CPL Conversion", parentId = 3012, RouteUrl = "/information" });
        menuItems.Add(new MenuItem { id = 3056, name = "ATPL Conversion", parentId = 3012, RouteUrl = "/information" });
        menuItems.Add(new MenuItem { id = 3057, name = "CPL Ab-initio Issue", parentId = 3012, RouteUrl = "/information" });
        menuItems.Add(new MenuItem { id = 3058, name = "ATPL Upgrade", parentId = 3012, RouteUrl = "/information" });
        menuItems.Add(new MenuItem { id = 3059, name = "ATPL/CPL/MPL Renewal", parentId = 3012, RouteUrl = "/information" });
        menuItems.Add(new MenuItem { id = 3060, name = "ATPL/CPL/MPL Flight Test (Initial / Renewal)", parentId = 3012, RouteUrl = "/information" });

        menuItems.Add(new MenuItem { id = 3023, name = "Rating / Endorsement / Certificate", parentId = 3020, RouteUrl = null });
        menuItems.Add(new MenuItem { id = 3061, name = "Language Proficiency Endorsement", parentId = 3023, RouteUrl = "/information" });
        menuItems.Add(new MenuItem { id = 3062, name = "Validation of Licence", parentId = 3023, RouteUrl = "/information" });
        menuItems.Add(new MenuItem { id = 3063, name = "Aircraft Rating Endorsement", parentId = 3023, RouteUrl = "/information" });
        menuItems.Add(new MenuItem { id = 3064, name = "Instrument Rating Endorsement", parentId = 3023, RouteUrl = "/information" });
        menuItems.Add(new MenuItem { id = 3065, name = "Change of Personal Particulars / Licence Remarks / Licence Reprint", parentId = 3023, RouteUrl = "/information" });
        menuItems.Add(new MenuItem { id = 3066, name = "Licence Verification", parentId = 3023, RouteUrl = "/information" });
        menuItems.Add(new MenuItem { id = 3067, name = "Conversion Terms (ATPL/CPL/AFI Rating)", parentId = 3023, RouteUrl = "/information" });
        menuItems.Add(new MenuItem { id = 3068, name = "Certificate of Experience (Initial / Renewal)", parentId = 3023, RouteUrl = "/information" });
        menuItems.Add(new MenuItem { id = 3069, name = "Other Licence Application", parentId = 3023, RouteUrl = "/information" });
        menuItems.Add(new MenuItem { id = 3070, name = "Theoretical Knowledge Examination - Result Submission", parentId = 3023, RouteUrl = "/information" });
        menuItems.Add(new MenuItem { id = 3071, name = "Theoretical Knowledge Examination - Booking", parentId = 3023, RouteUrl = "/information" });

        // Licence - Aircraft Maintenance (12)
        menuItems.Add(new MenuItem { id = 3100, name = "Aircraft Maintenance", parentId = 3, RouteUrl = null });
        menuItems.Add(new MenuItem { id = 3101, name = "Issue of HKAR-66 Aircraft Maintenance Licence", parentId = 3100, RouteUrl = "/information" });
        menuItems.Add(new MenuItem { id = 3102, name = "Apply for a HKAR-66 Aircraft Maintenance Licence based on Foreign issued Licence", parentId = 3100, RouteUrl = "/information" });
        menuItems.Add(new MenuItem { id = 3103, name = "Renewal of HKAR-66 Aircraft Maintenance Licence", parentId = 3100, RouteUrl = "/information" });
        menuItems.Add(new MenuItem { id = 3104, name = "Endorsement with Aircraft Type Rating", parentId = 3100, RouteUrl = "/information" });
        menuItems.Add(new MenuItem { id = 3105, name = "Extension to include New Category or Sub-category", parentId = 3100, RouteUrl = "/information" });
        menuItems.Add(new MenuItem { id = 3106, name = "Removal of Limitation", parentId = 3100, RouteUrl = "/information" });
        menuItems.Add(new MenuItem { id = 3107, name = "Conversion from HKAR-AMEL to HKAR-66", parentId = 3100, RouteUrl = "/information" });
        menuItems.Add(new MenuItem { id = 3108, name = "Examination", parentId = 3100, RouteUrl = "/information" });
        menuItems.Add(new MenuItem { id = 3109, name = "Change the Personal Details on your Licence", parentId = 3100, RouteUrl = "/information" });
        menuItems.Add(new MenuItem { id = 3110, name = "Request a Replacement Licence", parentId = 3100, RouteUrl = "/information" });
        menuItems.Add(new MenuItem { id = 3111, name = "Foreign Licence Verification Request", parentId = 3100, RouteUrl = "/information" });
        menuItems.Add(new MenuItem { id = 3112, name = "Request for HKCAD licence Verification Letter", parentId = 3100, RouteUrl = "/information" });
        // Licence - Medical Certificate (6)
        menuItems.Add(new MenuItem { id = 3200, name = "Medical Certificate", parentId = 3, RouteUrl = null });
        menuItems.Add(new MenuItem { id = 3210, name = "Initial application", parentId = 3200, RouteUrl = "/information" });
        menuItems.Add(new MenuItem { id = 3211, name = "Initial application (Class 1)", parentId = 3210, RouteUrl = "/information" });
        menuItems.Add(new MenuItem { id = 3212, name = "Initial application (Class 2)", parentId = 3210, RouteUrl = "/information" });

        menuItems.Add(new MenuItem { id = 3220, name = "Application Renewal", parentId = 3200, RouteUrl = null });
        menuItems.Add(new MenuItem { id = 3221, name = "Application Renewal (Class 2)", parentId = 3220, RouteUrl = "/information" });
        menuItems.Add(new MenuItem { id = 3222, name = "Application Renewal (Class 3)", parentId = 3220, RouteUrl = "/information" });

        menuItems.Add(new MenuItem { id = 3230, name = "Notification of Unfitness and Medical Clearance", parentId = 3200, RouteUrl = null });
        menuItems.Add(new MenuItem { id = 3231, name = "Illness (Class 3)", parentId = 3230, RouteUrl = "/information" });
        menuItems.Add(new MenuItem { id = 3232, name = "Injury (Class 1)", parentId = 3230, RouteUrl = "/information" });
        menuItems.Add(new MenuItem { id = 3233, name = "Pregnancy (Class 1)", parentId = 3230, RouteUrl = "/information" });
        menuItems.Add(new MenuItem { id = 3234, name = "Pregnancy (Class 2)", parentId = 3230, RouteUrl = "/information" });

        // Information menu
        menuItems.Add(new MenuItem { id = 5001, name = "Licence's information", parentId = 5, RouteUrl = "/information" });
        menuItems.Add(new MenuItem { id = 5002, name = "News", parentId = 5, RouteUrl = "/latestNews" });
        menuItems.Add(new MenuItem { id = 5003, name = "FAQ", parentId = 5, RouteUrl = "/frequentlyAskedQuestion" });
        return menuItems;
    }

    void LocationChanged(object sender, LocationChangedEventArgs e)
    {
        string navigationMethod = e.IsNavigationIntercepted ? "HTML" : "code";
        System.Diagnostics.Debug.WriteLine($"Notified of navigation via {navigationMethod} to {e.Location}");
        if (NavbarCollapse.IsOpen == true)
            NavbarCollapse.Toggle();
    }
    void IDisposable.Dispose()
    {
        // Unsubscribe from the event when our component is disposed
        NavigationManager.LocationChanged -= LocationChanged;
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavigationManager { get; set; }
    }
}
#pragma warning restore 1591
